@{
    ViewData["Title"] = "Survey Data";
}
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<link href="~/css/d3.parsets.css" rel="stylesheet" />
<link href="~/lib/UI-Dropdown-master/dropdown.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.10/css/select2.min.css" rel="stylesheet" />

<style>
    .csvcolumn-list {
        -webkit-column-count: 1;
        -moz-column-count: 1;
        column-count: 1;
    }

        .csvcolumn-list li {
            flex: 1 0 25%;
        }

    .widget {
        content: "";
        clear: both;
        width: 100%;
        padding-top: 20px;
    }

    #filter-container {
        float: left;
        width: 25%;
    }

    #select-container {
        float: right;
        width: 25%;
    }

    #vis-container {
        float: left;
        width: 50%;
    }

    #generate {
        border: solid 2px;
        width: 200px;
        background: #14866d;
        font-weight: bold;
        color: #fff;
        height: 40px;
        border-radius: 4px;
        text-align: center;
        margin: 9px auto;
        padding-top: 5px;
        font-size: 18px;
    }

        #generate:hover {
            background-color: #25967D
        }

    #vis svg {
        margin: auto;
        display: block;
    }

    #vis {
        padding-left: 25px;
    }

    .filter-label {
        width: 100%;
        padding: 5px;
        margin-bottom: unset;
        font-weight: unset;
        cursor: pointer;
    }

    .filter-selected {
        background-color: #36c;
        color: #fff;
        font-weight: bold;
    }

    #filter-container .legend,
    #select-container .legend {
        font-family: montserrat;
        color: white;
        background: #666;
        text-align: center;
        height: 38px;
        font-size: 20px;
    }

    #filter-container .legend {
        border-radius: 0px 10px 10px 0px;
    }

    #select-container .legend {
        border-radius: 10px 0px 0px 10px;
    }

    .filter-show {
        display: none;
    }

    @@media screen and (max-width: 1000px) {
        #filter-container,
        #select-container {
            float: unset;
            width: 100%;
            overflow: hidden;
            height: 40px;
        }

            #filter-container .legend {
                border-radius: unset;
            }

            #select-container .legend {
                border-radius: unset;
            }

        #vis-container {
            width: 100%;
        }

        .filter-show {
            display: inline;
        }

        .visible,
        .visible {
            height: 100% !important;
            overflow: visible !important;
        }
    }

    /* The container */
    .filter-label,
    .crosstabcheck-label {
        display: block;
        position: relative;
        padding: 10px;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    .filter-label-check {
        display: block;
        position: relative;
        padding: 10px;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

        /* Hide the browser's default checkbox */
    .filter-label .filter-list-item,
    .crosstabcheck-label .crosstabcheck-input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }

    .filter-label-check .filter-list-item {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
    }

    /* Create a custom checkbox */
    .filter-label .checkmark,
    .crosstabcheck-label .checkmark {
        position: absolute;
        top: 5px;
        right: 10px;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        background-color: #fff;
        border: solid 1px #ccc;
    }

    .filter-label-check .checkmark {
        position: absolute;
        top: 5px;
        right: 10px;
        height: 25px;
        width: 25px;
        border-radius: unset;
        background-color: #fff;
        border: solid 1px #ccc;
    }

    /* On mouse-over, add a grey background color */
    .filter-label:hover .filter-list-item ~ .checkmark,
    .crosstabcheck-label .crosstabcheck-input ~ .checkmark {
        background-color: #ccc;
    }

    .filter-label-check:hover .filter-list-item ~ .checkmark {
        background-color: #ccc;
    }

    /* When the checkbox is checked, add a blue background */
    .filter-label .filter-list-item:checked ~ .checkmark,
    .crosstabcheck-label .crosstabcheck-input:checked ~ .checkmark {
        background-color: #fff;
    }

    .filter-label-check .filter-list-item:checked ~ .checkmark {
        background-color: #fff;
    }

    /* Create the checkmark/indicator (hidden when not checked) */
    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    /* Show the checkmark when checked */
    .filter-label .filter-list-item:checked ~ .checkmark:after,
    .crosstabcheck-label .crosstabcheck-input:checked ~ .checkmark:after {
        display: block;
    }

    .filter-label-check .filter-list-item:checked ~ .checkmark:after {
        display: block;
    }
    /* Style the checkmark/indicator */
    .filter-label .checkmark:after,
    .crosstabcheck-label .checkmark:after {
        top: 7px;
        left: 7px;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background: #36c;
    }

    /* Style the checkmark/indicator */
    .filter-label-check .checkmark:after {
        right: 9px;
        left: unset;
        top: 5px;
        width: 5px;
        height: 10px;
        border: solid #36c;
        border-radius: unset;
        border-width: 0 3px 3px 0;
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        transform: rotate(45deg);
        background:unset;
    }
</style>
<div class="widget">
    <div id="filter-container">
        <div class="legend">Filters <div class="filter-show">[Show]</div></div>
    </div>
    <div id="select-container">
        <div class="legend">Display selection <div class="filter-show">[Show]</div></div>
        <fieldset>
            <ul class="list-group list-group-sortable csvcolumn-list"></ul>
        </fieldset>

    </div>
    <div id="vis-container">
        <div style="width:50%;"><label class="crosstabcheck-label" for="check-crosstab">Do you want to cross tab two categories?<input class="crosstabcheck-input" type="checkbox" name="crosstabselector" id="check-crosstab"><span class="checkmark"></span></label></div>
        <div id="generate">Generate chart</div>
        <div id="plotly-bar"></div>
        <div id="plotly-pie"></div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="~/js/d3.min.js"></script>
<script src="https://d3js.org/d3-array.v2.min.js"></script>
<script src="~/js/d3.parsets.js"></script>
<script src="~/js/highlight.js"></script>
<script src="~/js/jquery.sortable.min.js"></script>
<script src="~/lib/UI-Dropdown-master/dropdown.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.10/js/select2.min.js"></script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

<script>
    var datacolumns;
    var i;
    var datasummary = [];

    function column(a, b) {
        this.title = a;
        this.values = b;
    }

    function basicbardata(a, b, c) {
        this.x = a;
        this.y = b;
        this.type = c;
    }

    function basicpiedata(a, b, c, d) {
        this.values = a;
        this.labels = b;
        this.type = c;
        this.hole = d;
    }

    function groupbardata(a, b, c, d) {
        this.x = a;
        this.y = b;
        this.name = c;
        this.type = d;
    }

    d3.csv('https://localhost:44318/All_data_with_dates_and_filtered.csv', function (error, csv) {
        datacolumns = d3.keys(csv[0]);
        datacolumnssize = datacolumns.length;

        for (i = 2; i < datacolumns.length; i++) {
            var columnname = datacolumns[i];
            var columnuniques = d3.map(csv, function (d) { return d[datacolumns[i]]; }).keys();
            console.log(columnname);
            console.log(columnuniques);
            var columnsummary = new column(columnname, columnuniques)
            console.log(columnsummary);
            datasummary.push(columnsummary);
        }
        console.log('Data summary has ' + datasummary.length + ' objects');
        console.log(datasummary);

        var collator = new Intl.Collator(undefined, {
            numeric: true,
            sensitivity: 'base'
        });

  
        $('input[name="crosstabselector"]').change(function(){
            $('.filter-label').toggleClass('filter-label-check');
            if ($('input[name="crosstabselector"]').is(":checked")) {
                $('input[name="qselector"]').attr('type', 'checkbox');
            } else {
                $('input[name="qselector"]').attr('type', 'radio');
            }
        });

        for (i = 2; i < datacolumnssize; i++) {

            $(".csvcolumn-list").append('<li class="list-group-item" draggable="true"> <label class="filter-label" for= "check-' + datacolumns[i] + '">' + datacolumns[i] + '<input class="filter-list-item" type="radio" name="qselector" id="check-' + datacolumns[i] + '" value="' + datacolumns[i] + '"><span class="checkmark"></span></label ></li>');
        }

        $('.list-group-sortable').sortable({
            placeholderClass: 'list-group-item'
        });

        var filter_on = 'Country';

        var filter_list = d3.map(csv, function (d) {
            return d[filter_on];
        }).keys();

        filter_list.sort(collator.compare);

        console.log(filter_list);
        filterlength = filter_list.length;

        for (i = 0; i < filter_list.length; i++) {
            console.log(i);
            $(".filter-list").append('<li class=""> <label for="Source">' + filter_list[i] + '<input type="checkbox" name="qfilter" class="filter-check" id="' + filter_list[i] + '" value="' + filter_list[i] + '"></label ></li>');
        }

        for (i = 0; i < datasummary.length; i++) {

            var filter_title = datasummary[i].title;
            console.log('Beginning build of' + filter_title + ' filter');
            var filter_uniques = datasummary[i].values;

            $("#filter-container").append('<select class="js-example-basic-multiple ' + filter_title + '-filter" multiple="" style="width:320px;""></select>');
            $("." + filter_title + "-filter").append('<option value="">' + filter_title + '</option>');

            for (j = 0; j < filter_uniques.length; j++) {
                $("." + filter_title + "-filter").append('<option value="' + filter_uniques[j] + '">' + filter_uniques[j] + '</option>');
            }

            $('.' + filter_title + "-filter").select2({
                width: '100%',
                placeholder: filter_title,
                tags: true
            });

        }


        var filterarray = [];
        var filter_id = '.' + filter_on + '-filter';
        $('.Country-filter').on('change.select2', function (e) {
            filterarray = [];
            $('.Country-filter').find(':selected').each(function () {
                filterarray.push($(this).val());
                console.log("qselectorval array added")
            });
            console.log(filterarray)
        });

        var qselectlimit = 1;

        $('.filter-list-item').click(function () {
            $('input:radio[name=qselector]').parent().parent().removeClass('filter-selected');
            $(this).parent().parent().toggleClass('filter-selected');
            qselector();
        })

        $('.filter-show').click(function () {
            $(this).parent().parent().toggleClass('visible')
            var text = $(this).text();
            $(this).text(
                text == "[Show]" ? "[Hide]" : "[Show]");
        })

    });
</script>

<script>
    d3.rebind = function (target, source) {
        var i = 1, n = arguments.length, method;
        while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
        return target;
    };

    function d3_rebind(target, source, method) {
        return function () {
            var value = method.apply(source, arguments);
            return value === source ? target : value;
        };
    }

    d3.functor = function functor(v) {
        return typeof v === "function" ? v : function () {
            return v;
        };
    };
</script>

<script>
    var filter_on = 'Country';
    var filter_id = '.' + filter_on + '-filter';
    var qselectorval;
    var filterarray;
    var filtercount;

    function qselector() {
        qselectorval = [];
        console.log("qselectorval reset");
        $("input[name=qselector]:checked").each(function () {
            qselectorval.push($(this).val());
            console.log("qselectorval array added")
        });
        console.log('Qselection complete')
        console.log(qselectorval)
        generatechart();
    }

    function filterselect() {
        filterarray = [];
        filtercount = 0;
        for (i = 0; i < datasummary.length; i++) {
            var filterselected = [];
            $('.' + datasummary[i].title + '-filter').find(':selected').each(function () {
                filterselected.push($(this).val());
                console.log(filterselected)
                filtercount++;
                console.log(filtercount)
            });
            if (filterselected.length > 0) { filterarray.push(new column(datasummary[i].title, filterselected)) }

        }
        console.log(filterarray)
    }

    function singlechart(csv) {
        if (qselectorval === undefined || qselectorval === null) {
            qselectorval = "Country";
        }
            filterselect();

            if (filtercount > 0) {
                var data = csv;

                for (j = 0; j < filterarray.length; j++) {
                    var t;
                    t = data.filter(function (d, i) { return filterarray[j].values.indexOf(d[filterarray[j].title]) >= 0 });
                    data = t;
                }
            } else {
                var data = csv; // so that no boxes checked shows all data
            }



            filter = qselectorval;


            var rolledup = d3.rollup(data, v => v.length, d => d[filter]);
            console.log(rolledup);

            rolleduparray = Array.from(rolledup);
            console.log(rolleduparray);

            rolleduparray.sort(function (x, y) { return d3.ascending(x[0], y[0]); });

            var x = [];
            var y = [];

            for (i = 0; i < rolleduparray.length; i++) {
                x.push(rolleduparray[i][0]);
                y.push(rolleduparray[i][1]);
            }

            var bardata = [
                {
                    x: x,
                    y: y,
                    type: 'bar'
                }
            ];
            var piedata = [
                {
                    labels: x,
                    values: y,
                    type: 'pie',
                    hole: .4
                }
            ];

            Plotly.newPlot('plotly-bar', bardata);
            Plotly.newPlot('plotly-pie', piedata);
    }

    function groupchart(csv) {
        if (qselectorval === undefined || qselectorval === null) {
            qselectorval = "Country";
        }


            filterselect();

            if (filtercount > 0) {
                var data = csv;

                for (j = 0; j < filterarray.length; j++) {
                    var t;
                    t = data.filter(function (d, i) { return filterarray[j].values.indexOf(d[filterarray[j].title]) >= 0 });
                    data = t;
                }
            } else {
                var data = csv; // so that no boxes checked shows all data
            }



            filter = qselectorval;
            console.log(qselectorval);

            var rolledup = d3.rollup(data, v => v.length, d => d[qselectorval[0]], d => d[qselectorval[1]]);
            console.log('weve rolled up');
            console.log(rolledup);

            console.log('Now time to convert map to array');
            var rolledupgrouparray = Array.from(rolledup);
            console.log('weve created the array');
            console.log(rolledupgrouparray);
            console.log('Now time to convert nested map to array');
            for (i = 0; i < rolledupgrouparray.length; i++) {
                rolledupgrouparray[i][1] = Array.from(rolledupgrouparray[i][1]);
            }
            console.log('weve created the nested array');
            console.log(rolledupgrouparray);
            for (i = 0; i < rolledupgrouparray.length; i++) {
                rolledupgrouparray[i][1].sort(function (x, y) { return d3.ascending(x[0], y[0]); });
            }

            var bardata = []
            for (var i = 0; i < rolledupgrouparray.length; i++) {
                var group = new groupbardata();
                var xarray = [];
                var yarray = [];
                for (var j = 0; j < rolledupgrouparray[i][1].length; j++) {
                    xarray.push(rolledupgrouparray[i][1][j][0]);
                    yarray.push(rolledupgrouparray[i][1][j][1]);
                }
                group.name = rolledupgrouparray[i][0];
                group.type = 'bar';
                group.x = xarray;
                group.y = yarray;
                bardata.push(group);
            } 
            console.log(bardata);

            var layout = { barmode: 'group' };

            Plotly.newPlot('plotly-bar', bardata, layout);
    }

    function generatechart() {
        if (qselectorval === undefined || qselectorval === null) {
            qselectorval = "Country";
        }

        d3.csv("https://localhost:44318/All_data_with_dates_and_filtered.csv", function (error, csv) {

            groupchart(csv);

        })

    };

    $("input[name=qselector]").change(qselector);
    $("#generate").click(qselector);
    $('.list-group-sortable').sortable({
        placeholderClass: 'list-group-item'
    });
    $('.list-group-sortable').sortable().on("sortupdate", function (e, ui) {
        qselector();
    });

    $(filter_id).on('change.select2', function (e) {
        filterselect();
        if (qselectorval.length > 0) { generatechart(); }
    });


</script>

<style>
</style>

<div class="parsets tooltip"></div>
